import { Series } from './../src/series.js'
import { expect } from '@jest/globals'

const x = [
  0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12,
  0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25,
  0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38,
  0.39, 0.4, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51,
  0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64,
  0.65, 0.66, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77,
  0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89,
  0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98,
]

const y = [
  28.7186, 78.2209, -92.3479, -50.0216, -61.7387, -6.75729, -21.3204, 34.4361,
  16.3831, -94.2352, -98.1469, -80.0546, 46.3898, 39.5809, -38.6996, -2.04417,
  27.088, -34.3222, 6.06887, 73.2143, -51.5766, -33.4893, -19.3049, 58.1811,
  54.885, 34.6165, -21.1412, 27.9112, 13.5516, 56.1224, -58.4389, 65.1934,
  9.03322, -95.91, -43.5404, -26.5001, -93.6295, -30.0211, -84.32, 15.7431,
  47.77, 54.9284, 20.3058, 12.2843, -34.2107, 53.4051, 87.542, -74.4983,
  -25.0563, 14.4237, -94.2782, 41.4328, 56.0912, -84.9834, 15.4036, 99.0035,
  -97.7845, 54.9455, 54.9327, 96.6978, 88.5948, 10.4735, -62.2504, 87.9597,
  -41.5824, -81.7916, -87.5678, -71.4798, 20.2934, 41.7189, -8.67147, -83.0453,
  -15.8636, -97.0393, -45.7841, 53.9779, 52.8511, -45.9577, 2.67107, 83.2953,
  -48.1106, 85.3854, 32.0509, 58.6492, 84.0207, -95.6888, 96.981, 26.1363,
  -35.01, 93.7555, -22.1961, -53.1824, 31.2118, -9.72501, 15.2788, 53.3092,
  48.2117, 13.7937, 41.6131, -33.4312,
]

// Creates a new series with associated data and axes.
// Returns the decimated series data and lookup table.
function createSeriesAndDecimate(x, y, pixelsPerAxisUnit) {
  const xAxis = {
    minimum: 0.0,
    pixelsPerAxisUnit: function () {
      return pixelsPerAxisUnit
    },
    axisRect: { width: 640.0 },
  }

  const yAxis = {
    minimum: 0.0,
    pixelsPerAxisUnit: function () {
      return pixelsPerAxisUnit
    },
    axisRect: { height: 680.0 },
  }

  const series = new Series(xAxis, yAxis)
  series.set(x, y)

  return {
    decimated: series.decimated(),
    lookup: series.lookup(),
  }
}

test('Decimate_0', () => {
  // Arrange
  const x = [0.0, 0.01, 0.02, 0.03, 0.04]
  const y = [28.7186, 78.2209, -92.3479, -50.0216, -61.7387]

  // Act / Assert
  const expectedDecimated = [
    [
      0.0, 28.7185, 0.0, 28.7185, 10.0, 78.2209, 10.0, 78.2209, 20.0, -92.3479,
      20.0, -92.3479, 30.0, -50.0215, 30.0, -50.0215, 40.0, -61.7387, 40.0,
      -61.7387,
    ],
    [
      0.0, 28.7185, 0.0, 28.7185, 1.0, 78.2209, 1.0, 78.2209, 2.0, -92.3479,
      2.0, -92.3479, 3.0, -50.0215, 3.0, -50.0215, 4.0, -61.7387, 4.0, -61.7387,
    ],
  ]

  const expectedLookup = [
    [
      0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0,
      1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1,
      2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3,
      4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
      1, 2, 3, 4, 2, 3, 4, 4, 2, 3, 4, 4, 2, 3, 4, 4, 2, 3, 4, 4, 2, 3, 4, 4, 2,
      3, 4, 4, 2, 3, 4, 4, 2, 3, 4, 4, 2, 3, 4, 4, 2, 3, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    ],
    [
      0, 0, 1, 2, 0, 1, 2, 3, 1, 2, 3, 4, 2, 3, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
      4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
      3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
      4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
      4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    ],
  ]

  const pixelsPerAxisUnit = [1000.0, 100.0]
  for (let i = 0; i < pixelsPerAxisUnit.length; ++i) {
    const { decimated, lookup } = createSeriesAndDecimate(
      x,
      y,
      pixelsPerAxisUnit[i]
    )
    for (let j = 0; j < decimated.length; j += 2) {
      expect(decimated[j]).toBeCloseTo(expectedDecimated[i][j], 3)
      expect(lookup[j]).toBe(expectedLookup[i][j])
    }
  }
})

test('Decimate_1', () => {
  // Arrange
  const x = [0.0, 0.01, 0.02, 0.03, 0.04]
  const y = [28.7186, 78.2209, -92.3479, -50.0216, -61.7387]

  // Act / Assert
  const expected = [
    [0.1999, -92.3479, 0.0999, 78.2209],
    [0.09999, -92.3479, 0.04999, 78.2209],
    [0.01999, -92.3479, 0.00999, 78.2209],
  ]

  const pixelsPerAxisUnit = [10.0, 5.0, 1.0]
  for (let i = 0; i < pixelsPerAxisUnit.length; ++i) {
    const { decimated, _ } = createSeriesAndDecimate(x, y, pixelsPerAxisUnit[i])
    expect(decimated.length).toBe(expected[i].length)
    for (let j = 0; j < decimated.length; j += 2) {
      expect(decimated[j]).toBeCloseTo(expected[i][j], 3)
    }
  }
})

test('Decimate_2', () => {
  // Arrange
  const expected = [
    0.0, 28.7186, 0.0, 28.7186, 10.0, 78.2209, 10.0, 78.2209, 20.0, -92.3479,
    20.0, -92.3479, 30.0, -50.0216, 30.0, -50.0216, 40.0, -61.7387, 40.0,
    -61.7387, 50.0, -6.75729, 50.0, -6.75729, 60.0, -21.3204, 60.0, -21.3204,
    70.0, 34.4361, 70.0, 34.4361, 80.0, 16.3831, 80.0, 16.3831, 90.0, -94.2352,
    90.0, -94.2352, 100.0, -98.1469, 100.0, -98.1469, 110.0, -80.0546, 110.0,
    -80.0546, 120.0, 46.3898, 120.0, 46.3898, 130.0, 39.5809, 130.0, 39.5809,
    140.0, -38.6996, 140.0, -38.6996, 150.0, -2.04417, 150.0, -2.04417, 160.0,
    27.088, 160.0, 27.088, 170.0, -34.3222, 170.0, -34.3222, 180.0, 6.06887,
    180.0, 6.06887, 190.0, 73.2143, 190.0, 73.2143, 200.0, -51.5766, 200.0,
    -51.5766, 210.0, -33.4893, 210.0, -33.4893, 220.0, -19.3049, 220.0,
    -19.3049, 230.0, 58.1811, 230.0, 58.1811, 240.0, 54.885, 240.0, 54.885,
    250.0, 34.6165, 250.0, 34.6165, 260.0, -21.1412, 260.0, -21.1412, 270.0,
    27.9112, 270.0, 27.9112, 280.0, 13.5516, 280.0, 13.5516, 290.0, 56.1224,
    290.0, 56.1224, 300.0, -58.4389, 300.0, -58.4389, 310.0, 65.1934, 310.0,
    65.1934, 320.0, 9.03322, 320.0, 9.03322, 330.0, -95.91, 330.0, -95.91,
    340.0, -43.5404, 340.0, -43.5404, 350.0, -26.5001, 350.0, -26.5001, 360.0,
    -93.6295, 360.0, -93.6295, 370.0, -30.0211, 370.0, -30.0211, 380.0, -84.32,
    380.0, -84.32, 390.0, 15.7431, 390.0, 15.7431, 400.0, 47.77, 400.0, 47.77,
    410.0, 54.9284, 410.0, 54.9284, 420.0, 20.3058, 420.0, 20.3058, 430.0,
    12.2843, 430.0, 12.2843, 440.0, -34.2107, 440.0, -34.2107, 450.0, 53.4051,
    450.0, 53.4051, 460.0, 87.542, 460.0, 87.542, 470.0, -74.4983, 470.0,
    -74.4983, 480.0, -25.0563, 480.0, -25.0563, 490.0, 14.4237, 490.0, 14.4237,
    500.0, -94.2782, 500.0, -94.2782, 510.0, 41.4328, 510.0, 41.4328, 520.0,
    56.0912, 520.0, 56.0912, 530.0, -84.9834, 530.0, -84.9834, 540.0, 15.4036,
    540.0, 15.4036, 550.0, 99.0035, 550.0, 99.0035, 560.0, -97.7845, 560.0,
    -97.7845, 570.0, 54.9455, 570.0, 54.9455, 580.0, 54.9327, 580.0, 54.9327,
    590.0, 96.6978, 590.0, 96.6978, 600.0, 88.5948, 600.0, 88.5948, 610.0,
    10.4735, 610.0, 10.4735, 620.0, -62.2504, 620.0, -62.2504, 630.0, 87.9597,
    630.0, 87.9597, 640.0, -41.5824, 640.0, -41.5824, 650.0, -81.7916, 650.0,
    -81.7916, 660.0, -87.5678, 660.0, -87.5678, 670.0, -71.4798, 670.0,
    -71.4798, 680.0, 20.2934, 680.0, 20.2934, 690.0, 41.7189, 690.0, 41.7189,
    700.0, -8.67147, 700.0, -8.67147, 710.0, -83.0453, 710.0, -83.0453, 720.0,
    -15.8636, 720.0, -15.8636, 730.0, -97.0393, 730.0, -97.0393, 740.0,
    -45.7841, 740.0, -45.7841, 750.0, 53.9779, 750.0, 53.9779, 760.0, 52.8511,
    760.0, 52.8511, 770.0, -45.9577, 770.0, -45.9577, 780.0, 2.67107, 780.0,
    2.67107, 790.0, 83.2953, 790.0, 83.2953, 800.0, -48.1106, 800.0, -48.1106,
    810.0, 85.3854, 810.0, 85.3854, 820.0, 32.0509, 820.0, 32.0509, 830.0,
    58.6492, 830.0, 84.0207, 840.0, -95.6888, 840.0, -95.6888, 850.0, 96.981,
    850.0, 96.981, 860.0, 26.1363, 860.0, 26.1363, 870.0, -35.01, 870.0, -35.01,
    880.0, 93.7555, 880.0, 93.7555, 890.0, -22.1961, 890.0, -22.1961, 900.0,
    -53.1824, 900.0, -53.1824, 910.0, 31.2118, 910.0, 31.2118, 920.0, -9.72501,
    920.0, -9.72501, 930.0, 15.2788, 930.0, 15.2788, 940.0, 53.3092, 940.0,
    53.3092, 950.0, 48.2117, 950.0, 48.2117, 960.0, 13.7937, 960.0, 13.7937,
    970.0, 41.6131, 970.0, 41.6131, 980.0, -33.4312, 980.0, -33.4312,
  ]

  const expectedLookup = [
    0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0,
    1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1,
    2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3,
    4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
    1, 2, 3, 4, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2,
    3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5, 6, 3, 4,
    5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5,
    6, 3, 4, 5, 6, 3, 4, 5, 6, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7,
    4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 5,
    6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6,
    7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8,
    9, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9,
    6, 7, 8, 9, 7, 8, 9, 10, 7, 8, 9, 10, 7, 8, 9, 10, 7, 8, 9, 10, 7, 8, 9, 10,
    7, 8, 9, 10, 7, 8, 9, 10, 7, 8, 9, 10, 7, 8, 9, 10, 7, 8, 9, 10, 8, 9, 10,
    11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8,
    9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 9, 10, 11, 12, 9, 10,
    11, 12, 9, 10, 11, 12, 9, 10, 11, 12, 9, 10, 11, 12, 9, 10, 11, 12, 9, 10,
    11, 12, 9, 10, 11, 12, 9, 10, 11, 12, 9, 10, 11, 12, 10, 11, 12, 13, 10, 11,
    12, 13, 10, 11, 12, 13, 10, 11, 12, 13, 10, 11, 12, 13, 10, 11, 12, 13, 10,
    11, 12, 13, 10, 11, 12, 13, 10, 11, 12, 13, 10, 11, 12, 13, 11, 12, 13, 14,
    11, 12, 13, 14, 11, 12, 13, 14, 11, 12, 13, 14, 11, 12, 13, 14, 11, 12, 13,
    14, 11, 12, 13, 14, 11, 12, 13, 14, 11, 12, 13, 14, 11, 12, 13, 14, 12, 13,
    14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12,
    13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15,
    13, 14, 15, 16, 13, 14, 15, 16, 13, 14, 15, 16, 13, 14, 15, 16, 13, 14, 15,
    16, 13, 14, 15, 16, 13, 14, 15, 16, 13, 14, 15, 16, 13, 14, 15, 16, 13, 14,
    15, 16, 14, 15, 16, 17, 14, 15, 16, 17, 14, 15, 16, 17, 14, 15, 16, 17, 14,
    15, 16, 17, 14, 15, 16, 17, 14, 15, 16, 17, 14, 15, 16, 17, 14, 15, 16, 17,
    14, 15, 16, 17, 15, 16, 17, 18, 15, 16, 17, 18, 15, 16, 17, 18, 15, 16, 17,
    18, 15, 16, 17, 18, 15, 16, 17, 18, 15, 16, 17, 18, 15, 16, 17, 18, 15, 16,
    17, 18, 15, 16, 17, 18, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 16,
    17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19,
    16, 17, 18, 19, 16, 17, 18, 19, 17, 18, 19, 20, 17, 18, 19, 20, 17, 18, 19,
    20, 17, 18, 19, 20, 17, 18, 19, 20, 17, 18, 19, 20, 17, 18, 19, 20, 17, 18,
    19, 20, 17, 18, 19, 20, 17, 18, 19, 20, 18, 19, 20, 21, 18, 19, 20, 21, 18,
    19, 20, 21, 18, 19, 20, 21, 18, 19, 20, 21, 18, 19, 20, 21, 18, 19, 20, 21,
    18, 19, 20, 21, 18, 19, 20, 21, 18, 19, 20, 21, 19, 20, 21, 22, 19, 20, 21,
    22, 19, 20, 21, 22, 19, 20, 21, 22, 19, 20, 21, 22, 19, 20, 21, 22, 19, 20,
    21, 22, 19, 20, 21, 22, 19, 20, 21, 22, 19, 20, 21, 22, 20, 21, 22, 23, 20,
    21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23,
    20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 22, 23, 21, 22, 23,
    24, 21, 22, 23, 24, 21, 22, 23, 24, 21, 22, 23, 24, 21, 22, 23, 24, 21, 22,
    23, 24, 21, 22, 23, 24, 21, 22, 23, 24, 21, 22, 23, 24, 21, 22, 23, 24, 22,
    23, 24, 25, 22, 23, 24, 25, 22, 23, 24, 25, 22, 23, 24, 25, 22, 23, 24, 25,
    22, 23, 24, 25, 22, 23, 24, 25, 22, 23, 24, 25, 22, 23, 24, 25, 22, 23, 24,
    25, 23, 24, 25, 26, 23, 24, 25, 26, 23, 24, 25, 26, 23, 24, 25, 26, 23, 24,
    25, 26, 23, 24, 25, 26, 23, 24, 25, 26, 23, 24, 25, 26, 23, 24, 25, 26, 23,
    24, 25, 26, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27,
    24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26, 27, 24, 25, 26,
    27, 24, 25, 26, 27, 25, 26, 27, 28, 25, 26, 27, 28, 25, 26, 27, 28, 25, 26,
    27, 28, 25, 26, 27, 28, 25, 26, 27, 28, 25, 26, 27, 28, 25, 26, 27, 28, 25,
    26, 27, 28, 25, 26, 27, 28, 26, 27, 28, 29, 26, 27, 28, 29, 26, 27, 28, 29,
    26, 27, 28, 29, 26, 27, 28, 29, 26, 27, 28, 29, 26, 27, 28, 29, 26, 27, 28,
    29, 26, 27, 28, 29, 26, 27, 28, 29, 27, 28, 29, 30, 27, 28, 29, 30, 27, 28,
    29, 30, 27, 28, 29, 30, 27, 28, 29, 30, 27, 28, 29, 30, 27, 28, 29, 30, 27,
    28, 29, 30, 27, 28, 29, 30, 27, 28, 29, 30, 28, 29, 30, 31, 28, 29, 30, 31,
    28, 29, 30, 31, 28, 29, 30, 31, 28, 29, 30, 31, 28, 29, 30, 31, 28, 29, 30,
    31, 28, 29, 30, 31, 28, 29, 30, 31, 28, 29, 30, 31, 29, 30, 31, 32, 29, 30,
    31, 32, 29, 30, 31, 32, 29, 30, 31, 32, 29, 30, 31, 32, 29, 30, 31, 32, 29,
    30, 31, 32, 29, 30, 31, 32, 29, 30, 31, 32, 29, 30, 31, 32, 30, 31, 32, 33,
    30, 31, 32, 33, 30, 31, 32, 33, 30, 31, 32, 33, 30, 31, 32, 33, 30, 31, 32,
    33, 30, 31, 32, 33, 30, 31, 32, 33, 30, 31, 32, 33, 30, 31, 32, 33, 31, 32,
    33, 34, 31, 32, 33, 34, 31, 32, 33, 34, 31, 32, 33, 34, 31, 32, 33, 34, 31,
    32, 33, 34, 31, 32, 33, 34, 31, 32, 33, 34, 31, 32, 33, 34, 31, 32, 33, 34,
    32, 33, 34, 35, 32, 33, 34, 35, 32, 33, 34, 35, 32, 33, 34, 35, 32, 33, 34,
    35, 32, 33, 34, 35, 32, 33, 34, 35, 32, 33, 34, 35, 32, 33, 34, 35, 32, 33,
    34, 35, 33, 34, 35, 36, 33, 34, 35, 36, 33, 34, 35, 36, 33, 34, 35, 36, 33,
    34, 35, 36, 33, 34, 35, 36, 33, 34, 35, 36, 33, 34, 35, 36, 33, 34, 35, 36,
    33, 34, 35, 36, 34, 35, 36, 37, 34, 35, 36, 37, 34, 35, 36, 37, 34, 35, 36,
    37, 34, 35, 36, 37, 34, 35, 36, 37, 34, 35, 36, 37, 34, 35, 36, 37, 34, 35,
    36, 37, 34, 35, 36, 37, 35, 36, 37, 38, 35, 36, 37, 38, 35, 36, 37, 38, 35,
    36, 37, 38, 35, 36, 37, 38, 35, 36, 37, 38, 35, 36, 37, 38, 35, 36, 37, 38,
    35, 36, 37, 38, 35, 36, 37, 38, 36, 37, 38, 39, 36, 37, 38, 39, 36, 37, 38,
    39, 36, 37, 38, 39, 36, 37, 38, 39, 36, 37, 38, 39, 36, 37, 38, 39, 36, 37,
    38, 39, 36, 37, 38, 39, 36, 37, 38, 39, 37, 38, 39, 40, 37, 38, 39, 40, 37,
    38, 39, 40, 37, 38, 39, 40, 37, 38, 39, 40, 37, 38, 39, 40, 37, 38, 39, 40,
    37, 38, 39, 40, 37, 38, 39, 40, 37, 38, 39, 40, 38, 39, 40, 41, 38, 39, 40,
    41, 38, 39, 40, 41, 38, 39, 40, 41, 38, 39, 40, 41, 38, 39, 40, 41, 38, 39,
    40, 41, 38, 39, 40, 41, 38, 39, 40, 41, 38, 39, 40, 41, 39, 40, 41, 42, 39,
    40, 41, 42, 39, 40, 41, 42, 39, 40, 41, 42, 39, 40, 41, 42, 39, 40, 41, 42,
    39, 40, 41, 42, 39, 40, 41, 42, 39, 40, 41, 42, 39, 40, 41, 42, 40, 41, 42,
    43, 40, 41, 42, 43, 40, 41, 42, 43, 40, 41, 42, 43, 40, 41, 42, 43, 40, 41,
    42, 43, 40, 41, 42, 43, 40, 41, 42, 43, 40, 41, 42, 43, 40, 41, 42, 43, 41,
    42, 43, 44, 41, 42, 43, 44, 41, 42, 43, 44, 41, 42, 43, 44, 41, 42, 43, 44,
    41, 42, 43, 44, 41, 42, 43, 44, 41, 42, 43, 44, 41, 42, 43, 44, 41, 42, 43,
    44, 42, 43, 44, 45, 42, 43, 44, 45, 42, 43, 44, 45, 42, 43, 44, 45, 42, 43,
    44, 45, 42, 43, 44, 45, 42, 43, 44, 45, 42, 43, 44, 45, 42, 43, 44, 45, 42,
    43, 44, 45, 43, 44, 45, 46, 43, 44, 45, 46, 43, 44, 45, 46, 43, 44, 45, 46,
    43, 44, 45, 46, 43, 44, 45, 46, 43, 44, 45, 46, 43, 44, 45, 46, 43, 44, 45,
    46, 43, 44, 45, 46, 44, 45, 46, 47, 44, 45, 46, 47, 44, 45, 46, 47, 44, 45,
    46, 47, 44, 45, 46, 47, 44, 45, 46, 47, 44, 45, 46, 47, 44, 45, 46, 47, 44,
    45, 46, 47, 44, 45, 46, 47, 45, 46, 47, 48, 45, 46, 47, 48, 45, 46, 47, 48,
    45, 46, 47, 48, 45, 46, 47, 48, 45, 46, 47, 48, 45, 46, 47, 48, 45, 46, 47,
    48, 45, 46, 47, 48, 45, 46, 47, 48, 46, 47, 48, 49, 46, 47, 48, 49, 46, 47,
    48, 49, 46, 47, 48, 49, 46, 47, 48, 49, 46, 47, 48, 49, 46, 47, 48, 49, 46,
    47, 48, 49, 46, 47, 48, 49, 46, 47, 48, 49, 47, 48, 49, 50, 47, 48, 49, 50,
    47, 48, 49, 50, 47, 48, 49, 50, 47, 48, 49, 50, 47, 48, 49, 50, 47, 48, 49,
    50, 47, 48, 49, 50, 47, 48, 49, 50, 47, 48, 49, 50, 48, 49, 50, 51, 48, 49,
    50, 51, 48, 49, 50, 51, 48, 49, 50, 51, 48, 49, 50, 51, 48, 49, 50, 51, 48,
    49, 50, 51, 48, 49, 50, 51, 48, 49, 50, 51, 48, 49, 50, 51, 49, 50, 51, 52,
    49, 50, 51, 52, 49, 50, 51, 52, 49, 50, 51, 52, 49, 50, 51, 52, 49, 50, 51,
    52, 49, 50, 51, 52, 49, 50, 51, 52, 49, 50, 51, 52, 49, 50, 51, 52, 50, 51,
    52, 53, 50, 51, 52, 53, 50, 51, 52, 53, 50, 51, 52, 53, 50, 51, 52, 53, 50,
    51, 52, 53, 50, 51, 52, 53, 50, 51, 52, 53, 50, 51, 52, 53, 50, 51, 52, 53,
    51, 52, 53, 54, 51, 52, 53, 54, 51, 52, 53, 54, 51, 52, 53, 54, 51, 52, 53,
    54, 51, 52, 53, 54, 51, 52, 53, 54, 51, 52, 53, 54, 51, 52, 53, 54, 51, 52,
    53, 54, 52, 53, 54, 55, 52, 53, 54, 55, 52, 53, 54, 55, 52, 53, 54, 55, 52,
    53, 54, 55, 52, 53, 54, 55, 52, 53, 54, 55, 52, 53, 54, 55, 52, 53, 54, 55,
    52, 53, 54, 55, 53, 54, 55, 56, 53, 54, 55, 56, 53, 54, 55, 56, 53, 54, 55,
    56, 53, 54, 55, 56, 53, 54, 55, 56, 53, 54, 55, 56, 53, 54, 55, 56, 53, 54,
    55, 56, 53, 54, 55, 56, 54, 55, 56, 57, 54, 55, 56, 57, 54, 55, 56, 57, 54,
    55, 56, 57, 54, 55, 56, 57, 54, 55, 56, 57, 54, 55, 56, 57, 54, 55, 56, 57,
    54, 55, 56, 57, 54, 55, 56, 57, 55, 56, 57, 58, 55, 56, 57, 58, 55, 56, 57,
    58, 55, 56, 57, 58, 55, 56, 57, 58, 55, 56, 57, 58, 55, 56, 57, 58, 55, 56,
    57, 58, 55, 56, 57, 58, 55, 56, 57, 58, 56, 57, 58, 59, 56, 57, 58, 59, 56,
    57, 58, 59, 56, 57, 58, 59, 56, 57, 58, 59, 56, 57, 58, 59, 56, 57, 58, 59,
    56, 57, 58, 59, 56, 57, 58, 59, 56, 57, 58, 59, 57, 58, 59, 60, 57, 58, 59,
    60, 57, 58, 59, 60, 57, 58, 59, 60, 57, 58, 59, 60, 57, 58, 59, 60, 57, 58,
    59, 60, 57, 58, 59, 60, 57, 58, 59, 60, 57, 58, 59, 60, 58, 59, 60, 61, 58,
    59, 60, 61, 58, 59, 60, 61, 58, 59, 60, 61, 58, 59, 60, 61, 58, 59, 60, 61,
    58, 59, 60, 61, 58, 59, 60, 61, 58, 59, 60, 61, 58, 59, 60, 61, 59, 60, 61,
    62, 59, 60, 61, 62, 59, 60, 61, 62, 59, 60, 61, 62, 59, 60, 61, 62, 59, 60,
    61, 62, 59, 60, 61, 62, 59, 60, 61, 62, 59, 60, 61, 62, 59, 60, 61, 62, 60,
    61, 62, 63, 60, 61, 62, 63, 60, 61, 62, 63, 60, 61, 62, 63, 60, 61, 62, 63,
    60, 61, 62, 63, 60, 61, 62, 63, 60, 61, 62, 63, 60, 61, 62, 63, 60, 61, 62,
    63, 61, 62, 63, 64, 61, 62, 63, 64, 61, 62, 63, 64, 61, 62, 63, 64, 61, 62,
    63, 64, 61, 62, 63, 64, 61, 62, 63, 64, 61, 62, 63, 64, 61, 62, 63, 64, 61,
    62, 63, 64, 62, 63, 64, 65, 62, 63, 64, 65, 62, 63, 64, 65, 62, 63, 64, 65,
    62, 63, 64, 65, 62, 63, 64, 65, 62, 63, 64, 65, 62, 63, 64, 65, 62, 63, 64,
    65, 62, 63, 64, 65, 63, 64, 65, 66, 63, 64, 65, 66, 63, 64, 65, 66, 63, 64,
    65, 66,
  ]

  // Act / Assert
  const { decimated, lookup } = createSeriesAndDecimate(x, y, 1000.0)

  expect(decimated.length).toBe(expected.length)
  expect(lookup.length).toBe(lookup.length)

  for (let i = 0; i < decimated.length; i += 2) {
    expect(decimated[i]).toBeCloseTo(expected[i], 3)
    expect(lookup[i]).toBe(expectedLookup[i])
  }
})

test('Decimate_3', () => {
  // Arrange
  const expectedDecimated = [
    0.0, 28.7186, 0, 28.7186, 1, 78.2209, 1, 78.2209, 2, -92.3479, 2, -92.3479,
    3, -50.0216, 3, -50.0216, 4, -61.7387, 4, -61.7387, 5, -6.75729, 5,
    -6.75729, 6, -21.3204, 6, -21.3204, 7, 34.4361, 7, 34.4361, 8, 16.3831, 8,
    16.3831, 9, -94.2352, 9, -94.2352, 10, -98.1469, 10, -98.1469, 11, -80.0546,
    11, -80.0546, 12, 46.3898, 12, 46.3898, 13, 39.5809, 13, 39.5809, 14,
    -38.6996, 14, -38.6996, 15, -2.04417, 15, -2.04417, 16, 27.088, 16, 27.088,
    17, -34.3222, 17, -34.3222, 18, 6.06887, 18, 6.06887, 19, 73.2143, 19,
    73.2143, 20, -51.5766, 20, -51.5766, 21, -33.4893, 21, -33.4893, 22,
    -19.3049, 22, -19.3049, 23, 58.1811, 23, 58.1811, 24, 54.885, 24, 54.885,
    25, 34.6165, 25, 34.6165, 26, -21.1412, 26, -21.1412, 27, 27.9112, 27,
    27.9112, 28, 13.5516, 29, 56.1224, 30, -58.4389, 30, -58.4389, 31, 65.1934,
    31, 65.1934, 32, 9.03322, 32, 9.03322, 33, -95.91, 33, -95.91, 34, -43.5404,
    34, -43.5404, 35, -26.5001, 35, -26.5001, 36, -93.6295, 36, -93.6295, 37,
    -30.0211, 37, -30.0211, 38, -84.32, 38, -84.32, 39, 15.7431, 39, 15.7431,
    40, 47.77, 40, 47.77, 41, 54.9284, 41, 54.9284, 42, 20.3058, 42, 20.3058,
    43, 12.2843, 43, 12.2843, 44, -34.2107, 44, -34.2107, 45, 53.4051, 45,
    53.4051, 46, 87.542, 46, 87.542, 47, -74.4983, 47, -74.4983, 48, -25.0563,
    48, -25.0563, 49, 14.4237, 49, 14.4237, 50, -94.2782, 50, -94.2782, 51,
    41.4328, 51, 41.4328, 52, 56.0912, 52, 56.0912, 53, -84.9834, 53, -84.9834,
    54, 15.4036, 54, 15.4036, 55, 99.0035, 55, 99.0035, 56, -97.7845, 57,
    54.9455, 58, 54.9327, 58, 54.9327, 59, 96.6978, 59, 96.6978, 60, 88.5948,
    60, 88.5948, 61, 10.4735, 61, 10.4735, 62, -62.2504, 62, -62.2504, 63,
    87.9597, 63, 87.9597, 64, -41.5824, 64, -41.5824, 65, -81.7916, 65,
    -81.7916, 66, -87.5678, 66, -87.5678, 67, -71.4798, 67, -71.4798, 68,
    20.2934, 68, 20.2934, 69, 41.7189, 69, 41.7189, 70, -8.67147, 70, -8.67147,
    71, -83.0453, 71, -83.0453, 72, -15.8636, 72, -15.8636, 73, -97.0393, 73,
    -97.0393, 74, -45.7841, 74, -45.7841, 75, 53.9779, 75, 53.9779, 76, 52.8511,
    76, 52.8511, 77, -45.9577, 77, -45.9577, 78, 2.67107, 78, 2.67107, 79,
    83.2953, 79, 83.2953, 80, -48.1106, 80, -48.1106, 81, 85.3854, 81, 85.3854,
    82, 32.0509, 82, 32.0509, 83, 58.6492, 83, 84.0207, 84, -95.6888, 84,
    -95.6888, 85, 96.981, 85, 96.981, 86, 26.1363, 86, 26.1363, 87, -35.01, 87,
    -35.01, 88, 93.7555, 88, 93.7555, 89, -22.1961, 89, -22.1961, 90, -53.1824,
    90, -53.1824, 91, 31.2118, 91, 31.2118, 92, -9.72501, 92, -9.72501, 93,
    15.2788, 93, 15.2788, 94, 53.3092, 94, 53.3092, 95, 48.2117, 95, 48.2117,
    96, 13.7937, 96, 13.7937, 97, 41.6131, 97, 41.6131, 98, -33.4312, 98,
    -33.4312,
  ]

  const expectedLookup = [
    0, 0, 1, 2, 0, 1, 2, 3, 1, 2, 3, 4, 2, 3, 4, 5, 3, 4, 5, 6, 4, 5, 6, 7, 5,
    6, 7, 8, 6, 7, 8, 9, 7, 8, 9, 10, 8, 9, 10, 11, 9, 10, 11, 12, 10, 11, 12,
    13, 11, 12, 13, 14, 12, 13, 14, 15, 13, 14, 15, 16, 14, 15, 16, 17, 15, 16,
    17, 18, 16, 17, 18, 19, 17, 18, 19, 20, 18, 19, 20, 21, 19, 20, 21, 22, 20,
    21, 22, 23, 21, 22, 23, 24, 22, 23, 24, 25, 23, 24, 25, 26, 24, 25, 26, 27,
    25, 26, 27, 28, 26, 27, 28, 29, 27, 28, 29, 30, 27, 28, 29, 30, 28, 29, 30,
    31, 29, 30, 31, 32, 30, 31, 32, 33, 31, 32, 33, 34, 32, 33, 34, 35, 33, 34,
    35, 36, 34, 35, 36, 37, 35, 36, 37, 38, 36, 37, 38, 39, 37, 38, 39, 40, 38,
    39, 40, 41, 39, 40, 41, 42, 40, 41, 42, 43, 41, 42, 43, 44, 42, 43, 44, 45,
    43, 44, 45, 46, 44, 45, 46, 47, 45, 46, 47, 48, 46, 47, 48, 49, 47, 48, 49,
    50, 48, 49, 50, 51, 49, 50, 51, 52, 50, 51, 52, 53, 51, 52, 53, 54, 52, 53,
    54, 55, 53, 54, 55, 56, 54, 55, 56, 57, 55, 56, 57, 58, 55, 56, 57, 58, 56,
    57, 58, 59, 57, 58, 59, 60, 58, 59, 60, 61, 59, 60, 61, 62, 60, 61, 62, 63,
    61, 62, 63, 64, 62, 63, 64, 65, 63, 64, 65, 66, 64, 65, 66, 67, 65, 66, 67,
    68, 66, 67, 68, 69, 67, 68, 69, 70, 68, 69, 70, 71, 69, 70, 71, 72, 70, 71,
    72, 73, 71, 72, 73, 74, 72, 73, 74, 75, 73, 74, 75, 76, 74, 75, 76, 77, 75,
    76, 77, 78, 76, 77, 78, 79, 77, 78, 79, 80, 78, 79, 80, 81, 79, 80, 81, 82,
    80, 81, 82, 83, 81, 82, 83, 84, 82, 83, 84, 85, 83, 84, 85, 86, 84, 85, 86,
    87, 85, 86, 87, 88, 86, 87, 88, 89, 87, 88, 89, 90, 88, 89, 90, 91, 89, 90,
    91, 92, 90, 91, 92, 93, 91, 92, 93, 94, 92, 93, 94, 95, 93, 94, 95, 96, 94,
    95, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96,
    96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95,
    96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96,
    95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96, 96, 95, 96, 96,
    96, 95, 96, 96, 96,
  ]

  // Act / Assert
  const { decimated, lookup } = createSeriesAndDecimate(x, y, 100.0)

  expect(decimated.length).toBe(expectedDecimated.length)
  expect(lookup.length).toBe(expectedLookup.length)

  for (let i = 0; i < decimated.length; i += 2) {
    expect(decimated[i]).toBeCloseTo(expectedDecimated[i], 3)
    expect(lookup[i]).toBe(expectedLookup[i])
  }
})

test('Decimate_4', () => {
  // Arrange
  const expectedDecimated = [
    0.9, -94.2352, 0.1, 78.2209, 1.0, -98.1469, 1.9, 73.2143, 2.0, -51.5766,
    2.3, 58.1811, 3.3, -95.91, 3.1, 65.1934, 4.7, -74.4983, 4.6, 87.542, 5.6,
    -97.7845, 5.5, 99.0035, 6.6, -87.5678, 6.0, 88.5948, 7.3, -97.0393, 7.9,
    83.2953, 8.4, -95.6888, 8.5, 96.981, 9.0, -53.1824, 9.4, 53.3092,
  ]

  const expectedLookup = [
    0, 0, 1, 2, 0, 1, 2, 3, 1, 2, 3, 4, 2, 3, 4, 5, 3, 4, 5, 6, 4, 5, 6, 7, 5,
    6, 7, 8, 6, 7, 8, 9, 7, 8, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9,
    9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
    8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8,
    9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9, 9, 9, 8, 9,
    9, 9, 8, 9, 9, 9, 8, 9, 9, 9,
  ]

  // Act / Assert
  const { decimated, lookup } = createSeriesAndDecimate(x, y, 10.0)

  expect(decimated.length).toBe(expectedDecimated.length)
  expect(lookup.length).toBe(expectedLookup.length)

  for (let i = 0; i < decimated.length; i += 2) {
    expect(decimated[i]).toBeCloseTo(expectedDecimated[i], 3)
    expect(lookup[i]).toBe(expectedLookup[i])
  }
})

test('Decimate_5', () => {
  // Arrange
  const expectedDecimated = [
    0.5, -98.1469, 0.05, 78.2209, 1.65, -95.91, 1.55, 65.1934, 2.8, -97.7845,
    2.75, 99.0035, 3.65, -97.0393, 3.0, 88.5948, 4.2, -95.6888, 4.25, 96.981,
  ]

  const expectedLookup = [
    0, 0, 1, 2, 0, 1, 2, 3, 1, 2, 3, 4, 2, 3, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4,
    4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
    3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3,
    4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4,
    4, 4, 3, 4, 4, 4, 3, 4, 4, 4,
  ]

  // Act / Assert
  const { decimated, lookup } = createSeriesAndDecimate(x, y, 5.0)

  expect(decimated.length).toBe(expectedDecimated.length)
  expect(lookup.length).toBe(expectedLookup.length)

  for (let i = 0; i < decimated.length; i += 2) {
    expect(decimated[i]).toBeCloseTo(expectedDecimated[i], 3)
    expect(lookup[i]).toBe(expectedLookup[i])
  }
})

test('Decimate_6', () => {
  // Arrange
  const expectedDecimated = [0.1, -98.1469, 0.55, 99.0035]

  const expectedLookup = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ]

  // Act / Assert
  const { decimated, lookup } = createSeriesAndDecimate(x, y, 1.0)

  expect(decimated.length).toBe(expectedDecimated.length)
  expect(lookup.length).toBe(expectedLookup.length)

  for (let i = 0; i < decimated.length; i += 2) {
    expect(decimated[i]).toBeCloseTo(expectedDecimated[i], 3)
    expect(lookup[i]).toBe(expectedLookup[i])
  }
})
